<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><title>Prof. Frank Dehne</title>


  

  
  
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"></head><body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);" alink="#000000" link="#000000" vlink="#000000">
<table border="0" width="100%">

  <tbody>
    <tr>
      <td height="27" width="45%">
      <h2>COMP 5704: Parallel Algorithms and Applications in Data Science<br>
</h2>
      </td>
      <td height="27" width="10%">
      <p><br>
      </p>
      </td>
      <td height="27" width="45%">
      <p><b>School of Computer Science</b><br>
      <b>Carleton University, Ottawa, Canada</b></p>
      </td>
    </tr>
  </tbody>
</table>

<hr noshade="noshade">
<h2><font color="#005128">Project Title: </font><font><font color="#005128">Parallel String Matching</font></font></h2>

<h2><font><font color="#005128">Name: Dengyu Liang</font></font></h2>

<h2><font><font color="#005128">E-Mail: dengyuliang@cmail.carleton.ca</font></font></h2>



<hr noshade="noshade">
<b><font color="#005128">Project Outline:</font></b> String matching is a fundamental problem in computer science, 
with applications in fields such as bioinformatics, search engines, and large database searches. 
While sequence algorithms are effective at solving this problem,
 their performance can be limited by the linear increase in the size of the matching string, 
 leading to long search times for large datasets. 
 In recent years, there has been a trend toward using modern CPUs with multiple cores and GPUs for data processing, 
 and parallelization has become an important consideration in algorithm design. Given the data structure of string matching, 
 it can potentially be highly amenable to parallel programming, allowing for efficient solutions to large-scale matching problems on large-scale systems.
<p>The goal of this project was to investigate the parallel implementation of traditional sequence string matching algorithms, 
implementing their parallel versions using Cilk and Cuda, and comparing the benefits of different string matching algorithms in
 different parallel architectures. I also examined the potential applications and limitations of these algorithms on a distributed
 architecture. In this project, I implemented seven different string-matching algorithms in CPU parallel and five in GPU. 
 For algorithms that are difficult to parallelize algorithmically, I partitioned the index to perform parallel operations. 
 Some of the algorithms also used bit parallel or SSE instructions to improve performance.
 I analyzed the speedup obtained by different algorithms and the worst case speedup obtained.</p>
 <p>It can choose a more effective algorithm through analysis of pattern and text length, as well as preprocessing. 
 Our experimental results also demonstrate this point. The type of data being used can also impact efficiency, 
 as a genomic sequence with four letters may have more repetitions than natural language text, 
 which can affect the performance of the algorithm. 
 I will compare different datasets to explore the differences and determine the best algorithm.</p>
<p><b><font color="#005128">Startup Paper(s):
<a href="https://link.springer.com/chapter/10.1007/978-3-319-58943-5_15">Parallel String Matching</font></a>
<p><b><font color="#005128">Deliverables:</font></b></p>

<ul>

  <li>
    <div align="left"><a href="Literature_Review.pdf"><font color="#000000">Literature Review</font></a> </div>
  </li>
  <li>
    <div align="left"><a href="Presentation_Outline.pdf"><font color="#000000">Presentation Outline</font></a> </div>
  </li>
  <li>
    <div align="left"> <a href="Final_Presentation.pptx"><font color="#000000">Slide Presentation</font></a> </div>
  </li>
  <li>
    <div align="left"><a href="Final_Paper.pdf"><font color="#000000">Final
Paper</font></a> </div>
  </li>
  <li><a href="https://1drv.ms/u/s!ApPnCQ0WrWhlj4x0O3IoJ6h64ndM2Q?e=7glhDv"><font color="#000000">Code and Data</font></a>
</li>
</ul>

<p><b><font color="#005128">Relevant References:</font></b></p>

<ul>

  <li><a href="https://dl.acm.org/doi/proceedings/10.1145/800057">Zvi Galil*. 1984. Optimal parallel algorithms for string matching. In Proceedings of the sixteenth annual ACM symposium on Theory of computing (STOC '84). Association for Computing Machinery, New York, NY, USA, 240-248. https://doi.org/10.1145/800057.808687</font></a></li>
  <li><a href="https://ieeexplore.ieee.org/document/8622943">C. -L. Hung, T. -H. Hsu, H. -H. Wang and C. -Y. Lin, "A GPU-based Bit-Parallel Multiple Pattern Matching Algorithm," 2018 IEEE 20th International Conference on High Performance Computing and Communications; IEEE 16th International Conference on Smart City; IEEE 4th International Conference on Data Science and Systems (HPCC/SmartCity/DSS), 2018, pp. 1219-1222, doi: 10.1109/HPCC/SmartCity/DSS.2018.00205.</font></a></li>
</ul>

</body></html>